<% content_for :title, "Add Document - Ragdoll Engine Demo" %>

<div class="row">
  <div class="col-12">
    <div class="d-flex justify-content-between align-items-center mb-4">
      <h1><i class="fas fa-plus"></i> Add Document</h1>
      <%= link_to "Back to Documents", documents_path, class: "btn btn-outline-secondary" %>
    </div>
  </div>
</div>

<div class="row">
  <div class="col-md-8">
    <div class="card">
      <div class="card-header">
        <ul class="nav nav-tabs card-header-tabs" role="tablist">
          <li class="nav-item">
            <a class="nav-link active" id="file-tab" data-bs-toggle="tab" href="#file-upload" role="tab">
              <i class="fas fa-upload"></i> Upload Files
            </a>
          </li>
          <li class="nav-item">
            <a class="nav-link" id="text-tab" data-bs-toggle="tab" href="#text-content" role="tab">
              <i class="fas fa-keyboard"></i> Text Content
            </a>
          </li>
          <li class="nav-item">
            <a class="nav-link" id="directory-tab" data-bs-toggle="tab" href="#directory-upload" role="tab">
              <i class="fas fa-folder"></i> Directory
            </a>
          </li>
        </ul>
      </div>
      <div class="card-body">
        <div class="tab-content">
          <!-- File Upload Tab -->
          <div class="tab-pane fade show active" id="file-upload" role="tabpanel">
            
            <!-- Progress Upload Section -->
            <div id="progress-upload-section">
              <h6 class="text-primary mb-3">
                <i class="fas fa-chart-line me-2"></i>Upload with Progress Tracking
              </h6>
              
              <!-- Status indicator -->
              <div id="websocket-status" class="alert alert-info mb-3">
                <i class="fas fa-spinner fa-spin me-2"></i>Checking real-time capabilities...
              </div>
              
              <!-- Progress Upload Form -->
              <form id="progress-upload-form" 
                    action="<%= upload_async_documents_path %>"
                    method="post" 
                    enctype="multipart/form-data"
                    class="needs-validation mb-4"
                    novalidate>
                
                <%= hidden_field_tag :authenticity_token, form_authenticity_token %>
                
                <div class="mb-3">
                  <label for="progress_files" class="form-label">Select Files</label>
                  <input type="file" 
                         name="ragdoll_document[files][]" 
                         id="progress_files"
                         multiple 
                         accept=".pdf,.docx,.txt,.md,.html,.json,.xml,.csv" 
                         class="form-control" 
                         required>
                  <div class="form-text">
                    Supported formats: PDF, DOCX, TXT, MD, HTML, JSON, XML, CSV
                  </div>
                  <div class="invalid-feedback">
                    Please select at least one file.
                  </div>
                </div>
                
                <div class="mb-3">
                  <label for="progress_metadata" class="form-label">Metadata (Optional)</label>
                  <textarea name="ragdoll_document[metadata]" 
                            id="progress_metadata"
                            placeholder='{"author": "Your Name", "category": "documentation"}' 
                            class="form-control" 
                            rows="3"></textarea>
                  <div class="form-text">
                    Additional metadata in JSON format
                  </div>
                </div>
                
                <button type="submit" class="btn btn-primary" id="progress-upload-btn">
                  <i class="fas fa-upload me-2"></i>
                  Upload Files with Progress
                </button>
              </form>
              
              <!-- Progress Container -->
              <div id="progress-container" class="mt-4" style="display: none;">
                <div class="card">
                  <div class="card-header">
                    <h6 class="mb-0"><i class="fas fa-tasks me-2"></i>Upload Progress</h6>
                  </div>
                  <div class="card-body">
                    <div id="file-status-list"></div>
                    <div class="mt-3">
                      <div class="d-flex justify-content-between mb-2">
                        <span>Overall Progress:</span>
                        <span id="overall-percentage">0%</span>
                      </div>
                      <div class="progress">
                        <div id="overall-progress-bar" 
                             class="progress-bar" 
                             role="progressbar" 
                             style="width: 0%" 
                             aria-valuenow="0" 
                             aria-valuemin="0" 
                             aria-valuemax="100">
                          0%
                        </div>
                      </div>
                      <small id="progress-status" class="text-muted mt-2 d-block">Ready to upload</small>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            
            <hr class="my-4">
            
            <!-- Reliable Upload Section -->
            <div id="reliable-upload-section">
              <h6 class="text-success mb-3">
                <i class="fas fa-check-circle me-2"></i>Reliable Upload (Always Works)
              </h6>
              <p class="text-muted small mb-3">
                This upload method works without JavaScript and is compatible with all browsers and network configurations.
              </p>
              
              <%= form_with model: @document, 
                            url: documents_path, 
                            local: true, 
                            multipart: true, 
                            class: "needs-validation", 
                            novalidate: true, 
                            as: :ragdoll_document,
                            id: "reliable-upload-form" do |form| %>
                
                <div class="mb-3">
                  <label for="reliable_files" class="form-label">Select Files</label>
                  <%= form.file_field :files, 
                                      multiple: true, 
                                      accept: ".pdf,.docx,.txt,.md,.html,.json,.xml,.csv", 
                                      class: "form-control", 
                                      id: "reliable_files",
                                      required: true %>
                  <div class="form-text">
                    Files will be processed in the background. Check the Documents page for results.
                  </div>
                  <div class="invalid-feedback">
                    Please select at least one file.
                  </div>
                </div>
                
                <div class="mb-3">
                  <label for="reliable_metadata" class="form-label">Metadata (Optional)</label>
                  <%= form.text_area :metadata, 
                                     placeholder: '{"author": "Your Name", "category": "documentation"}', 
                                     class: "form-control", 
                                     rows: 3, 
                                     id: "reliable_metadata" %>
                </div>
                
                <button type="submit" class="btn btn-success" id="reliable-upload-btn">
                  <i class="fas fa-upload me-2"></i>
                  Upload Files (Reliable Method)
                </button>
              <% end %>
            </div>
          </div>
          
          <!-- Text Content Tab -->
          <div class="tab-pane fade" id="text-content" role="tabpanel">
            <%= form_with model: @document, 
                          url: documents_path, 
                          local: true, 
                          class: "needs-validation", 
                          novalidate: true, 
                          as: :ragdoll_document do |form| %>
              
              <div class="mb-3">
                <label for="document_title" class="form-label">Title</label>
                <%= form.text_field :title, 
                                    placeholder: "Enter document title", 
                                    class: "form-control", 
                                    required: true %>
                <div class="invalid-feedback">
                  Please provide a title.
                </div>
              </div>
              
              <div class="mb-3">
                <label for="document_text_content" class="form-label">Content</label>
                <%= form.text_area :text_content, 
                                   placeholder: "Enter your text content here...", 
                                   class: "form-control", 
                                   rows: 10, 
                                   required: true %>
                <div class="invalid-feedback">
                  Please provide some content.
                </div>
              </div>
              
              <div class="mb-3">
                <label for="text_metadata" class="form-label">Metadata (Optional)</label>
                <%= form.text_area :metadata, 
                                   placeholder: '{"author": "Your Name", "category": "documentation"}', 
                                   class: "form-control", 
                                   rows: 3,
                                   id: "text_metadata" %>
                <div class="form-text">
                  Additional metadata in JSON format
                </div>
              </div>
              
              <%= form.submit "Add Document", class: "btn btn-primary", id: "text-content-btn" %>
            <% end %>
          </div>
          
          <!-- Directory Upload Tab -->
          <div class="tab-pane fade" id="directory-upload" role="tabpanel">
            <%= form_with url: bulk_upload_documents_path, 
                          method: :post, 
                          local: true, 
                          class: "needs-validation", 
                          novalidate: true, 
                          id: "directory-upload-form" do |form| %>
              
              <div class="mb-3">
                <label for="directory_path" class="form-label">Directory Path</label>
                <%= form.text_field :directory_path, 
                                    placeholder: "/path/to/documents", 
                                    class: "form-control", 
                                    required: true %>
                <div class="form-text">
                  Full path to directory containing documents to import
                </div>
                <div class="invalid-feedback">
                  Please provide a valid directory path.
                </div>
              </div>
              
              <div class="alert alert-info">
                <i class="fas fa-info-circle"></i>
                <strong>Note:</strong> This will recursively process all supported files in the specified directory.
                Large directories may take some time to process.
              </div>
              
              <button type="submit" class="btn btn-warning" id="directory-upload-btn">
                <span class="spinner-border spinner-border-sm d-none me-2" role="status" aria-hidden="true"></span>
                <span class="btn-text">Import Directory</span>
              </button>
              
              <div class="alert alert-warning mt-3 d-none" id="directory-processing-alert">
                <i class="fas fa-spinner fa-spin"></i>
                <strong>Processing...</strong> Your directory is being imported. This may take several minutes for large directories.
                Please do not close this page.
              </div>
            <% end %>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <div class="col-md-4">
    <div class="card">
      <div class="card-header">
        <h5><i class="fas fa-info-circle"></i> Upload Information</h5>
      </div>
      <div class="card-body">
        <h6>Supported File Types:</h6>
        <ul class="list-unstyled">
          <li><i class="fas fa-file-pdf text-danger"></i> PDF Documents</li>
          <li><i class="fas fa-file-word text-primary"></i> Word Documents (.docx)</li>
          <li><i class="fas fa-file-alt text-secondary"></i> Text Files (.txt, .md)</li>
          <li><i class="fas fa-file-code text-warning"></i> HTML Files</li>
          <li><i class="fas fa-file-code text-info"></i> JSON/XML Files</li>
          <li><i class="fas fa-file-csv text-success"></i> CSV Files</li>
        </ul>
        
        <hr>
        
        <h6>Processing:</h6>
        <ul class="list-unstyled">
          <li><i class="fas fa-cogs text-primary"></i> Automatic content extraction</li>
          <li><i class="fas fa-cut text-success"></i> Intelligent text chunking</li>
          <li><i class="fas fa-vector-square text-info"></i> Vector embedding generation</li>
          <li><i class="fas fa-search text-warning"></i> Search optimization</li>
        </ul>
        
        <hr>
        
        <h6>Features:</h6>
        <ul class="list-unstyled">
          <li><i class="fas fa-tags text-primary"></i> Metadata extraction</li>
          <li><i class="fas fa-language text-success"></i> Multi-language support</li>
          <li><i class="fas fa-chart-line text-info"></i> Usage analytics</li>
          <li><i class="fas fa-sync text-warning"></i> Reprocessing support</li>
        </ul>
      </div>
    </div>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Check if ActionCable is available for progress tracking
  let actionCableAvailable = false;
  let progressTracker = null;
  
  // Wait a bit for CDN resources to load, then check ActionCable availability
  function checkActionCableAvailability() {
    try {
      actionCableAvailable = typeof ActionCable !== 'undefined';
      console.log('🔍 ActionCable availability check:', actionCableAvailable);
      console.log('🔍 window.App exists:', !!window.App);
      console.log('🔍 window.App.cable exists:', !!(window.App && window.App.cable));
      return actionCableAvailable;
    } catch (error) {
      console.log('❌ ActionCable check failed:', error);
      return false;
    }
  }
  
  // Initial check
  actionCableAvailable = checkActionCableAvailability();
  
  // Update status indicator with re-check
  function updateStatusIndicator() {
    const statusEl = document.getElementById('websocket-status');
    actionCableAvailable = checkActionCableAvailability();
    
    if (actionCableAvailable && statusEl) {
      statusEl.className = 'alert alert-success mb-3';
      statusEl.innerHTML = '<i class="fas fa-check-circle me-2"></i>Real-time progress tracking enabled';
    } else if (statusEl) {
      statusEl.className = 'alert alert-warning mb-3';
      statusEl.innerHTML = '<i class="fas fa-exclamation-triangle me-2"></i>Limited functionality - progress tracking unavailable';
    }
  }
  
  // Initial update
  updateStatusIndicator();
  
  // Re-check after a delay to account for CDN loading
  setTimeout(function() {
    updateStatusIndicator();
    console.log('🔄 Re-checked ActionCable availability after delay');
  }, 2000);
  
  // Generate a temporary session ID for ActionCable subscription
  function generateTemporarySessionId() {
    // Use crypto.randomUUID if available, otherwise fallback to timestamp + random
    if (crypto && crypto.randomUUID) {
      return crypto.randomUUID();
    } else {
      // Fallback: timestamp + random string
      const timestamp = Date.now().toString(36);
      const randomStr = Math.random().toString(36).substr(2, 9);
      return `temp_${timestamp}_${randomStr}`;
    }
  }
  
  // Progress upload form handler
  const progressForm = document.getElementById('progress-upload-form');
  if (progressForm) {
    console.log('📝 Progress form handler attached');
    progressForm.addEventListener('submit', async function(e) {
      console.log('🚀 Progress form submitted');
      e.preventDefault();
      
      const fileInput = document.getElementById('progress_files');
      const submitBtn = document.getElementById('progress-upload-btn');
      const progressContainer = document.getElementById('progress-container');
      
      // Validate files
      if (!fileInput.files.length) {
        alert('Please select at least one file.');
        return;
      }
      
      // Disable submit button
      const originalBtnHtml = submitBtn.innerHTML;
      submitBtn.disabled = true;
      submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Uploading...';
      
      // Show progress container
      if (progressContainer) {
        progressContainer.style.display = 'block';
        setupProgressDisplay(Array.from(fileInput.files));
      }
      
      // Setup ActionCable connection BEFORE starting upload to ensure it's ready
      let temporarySessionId = null;
      if (checkActionCableAvailability()) {
        // Generate a temporary session ID or use existing one
        temporarySessionId = generateTemporarySessionId();
        console.log('🎯 Setting up progress tracking BEFORE upload with temp session ID:', temporarySessionId);
        
        // Setup the subscription synchronously - we can't wait for connection in this context
        setupProgressTracking(temporarySessionId);
        updateProgressStatus('Connecting to real-time updates. Starting upload...');
        
        // Longer delay to ensure ActionCable subscription is fully established
        console.log('⏰ Waiting for ActionCable subscription to establish...');
        await new Promise(resolve => setTimeout(resolve, 1500));
        console.log('✅ ActionCable delay complete, starting upload');
      } else {
        console.warn('⚠️ ActionCable not available, will use fallback mode');
        updateProgressStatus('Starting upload (real-time updates unavailable)...');
      }
      
      try {
        const formData = new FormData(progressForm);
        
        // Add the temporary session ID to the form data so backend uses it
        if (temporarySessionId) {
          formData.append('temp_session_id', temporarySessionId);
        }
        
        const csrfToken = document.querySelector('meta[name="csrf-token"]');
        
        console.log('🚀 Sending upload request...');
        const response = await fetch(progressForm.action, {
          method: 'POST',
          body: formData,
          headers: {
            'X-CSRF-Token': csrfToken ? csrfToken.content : ''
          }
        });
        
        console.log('📨 Upload response received:', {
          status: response.status,
          statusText: response.statusText,
          ok: response.ok,
          headers: Object.fromEntries(response.headers.entries())
        });
        
        if (!response.ok) {
          throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
        const result = await response.json();
        console.log('📊 Upload result parsed:', result);
        console.log('🎯 Processing upload success...');
        
        if (result.success) {
          console.log('✅ Upload successful, processing has started');
          console.log('📡 Server session ID:', result.session_id);
          console.log('📡 Temp session ID used:', temporarySessionId);
          
          // If we have a different session ID from server, update our subscription
          if (result.session_id && result.session_id !== temporarySessionId) {
            console.log('🔄 Server provided different session ID, updating subscription...');
            // Unsubscribe from old channel
            if (progressTracker) {
              progressTracker.unsubscribe();
            }
            // Subscribe to correct channel
            setupProgressTracking(result.session_id);
          }
          
          updateProgressStatus('Upload successful! Background processing started with real-time tracking...');
          
          // Clear form
          fileInput.value = '';
          
        } else {
          throw new Error(result.error || 'Upload failed');
        }
        
      } catch (error) {
        console.error('💥 Upload error:', error);
        console.error('💥 Error details:', {
          message: error.message,
          stack: error.stack,
          name: error.name
        });
        updateProgressStatus('Upload failed: ' + error.message, 'danger');
        alert('Upload failed: ' + error.message);
        
        // Re-enable submit button only on error
        submitBtn.disabled = false;
        submitBtn.innerHTML = originalBtnHtml;
      }
    });
  }
  
  // Store file mapping for progress tracking
  let fileMapping = new Map();
  
  // Setup progress display for files
  function setupProgressDisplay(files) {
    const fileStatusList = document.getElementById('file-status-list');
    const overallProgressBar = document.getElementById('overall-progress-bar');
    const overallPercentage = document.getElementById('overall-percentage');
    
    if (!fileStatusList) return;
    
    // Create file status items and store mapping
    fileStatusList.innerHTML = '';
    fileMapping.clear();
    
    files.forEach((file, index) => {
      const fileItem = document.createElement('div');
      fileItem.className = 'mb-2 p-2 border rounded bg-light';
      fileItem.id = `file-${index}`;
      fileItem.setAttribute('data-filename', file.name);
      fileItem.innerHTML = `
        <div class="d-flex align-items-center justify-content-between">
          <span><i class="fas fa-file me-2"></i>${file.name}</span>
          <div class="d-flex align-items-center">
            <small class="text-muted me-2" id="file-status-${index}">Queued</small>
            <i class="fas fa-clock text-muted" id="file-icon-${index}"></i>
          </div>
        </div>
      `;
      fileStatusList.appendChild(fileItem);
      
      // Store mapping for easy lookup
      fileMapping.set(file.name, index);
      console.log(`📝 Mapped file "${file.name}" to index ${index}`);
    });
    
    console.log('🗺️ Final file mapping:', Array.from(fileMapping.entries()));
    
    // Initialize progress
    updateOverallProgress(0);
    updateProgressStatus('Files uploaded, starting background processing...');
  }
  
  // Setup ActionCable progress tracking (async version that waits for connection)
  function setupProgressTrackingAsync(sessionId) {
    return new Promise((resolve, reject) => {
      console.log('🚀 Setting up progress tracking for session:', sessionId);
      
      // Final check for ActionCable availability
      if (!checkActionCableAvailability()) {
        console.warn('❌ ActionCable not available, skipping progress tracking');
        updateProgressStatus('Real-time updates not available, using basic mode', 'warning');
        resolve();
        return;
      }
      
      console.log('📊 ActionCable environment check:');
      console.log('  - ActionCable type:', typeof ActionCable);
      console.log('  - window.App exists:', !!window.App);
      console.log('  - window.App.cable exists:', !!(window.App && window.App.cable));
      console.log('  - Session ID:', sessionId);
      
      try {
        // Ensure App.cable is initialized
        if (!window.App) {
          window.App = {};
        }
        
        if (!window.App.cable && typeof ActionCable !== 'undefined') {
          console.log('🔧 Initializing App.cable...');
          window.App.cable = ActionCable.createConsumer('/cable');
        }
        
        const consumer = window.App.cable;
        console.log('📡 Using consumer:', consumer);
        
        if (!consumer) {
          throw new Error('No ActionCable consumer available');
        }
        
        progressTracker = consumer.subscriptions.create(
          {
            channel: "FileProcessingChannel", 
            session_id: sessionId
          },
          {
            received: function(data) {
              console.log('📡 ActionCable data received:', data);
              handleProgressUpdate(data);
            },
            connected: function() {
              console.log('✅ Connected to FileProcessingChannel with session:', sessionId);
              updateProgressStatus('Connected to real-time updates. Ready for upload...');
              resolve(); // Connection established, ready to proceed
            },
            disconnected: function() {
              console.log('❌ Disconnected from FileProcessingChannel');
              updateProgressStatus('Lost connection to real-time updates', 'warning');
            },
            rejected: function() {
              console.log('❌ Connection rejected to FileProcessingChannel');
              updateProgressStatus('Connection rejected - channel may not exist', 'danger');
              reject(new Error('ActionCable connection rejected'));
            }
          }
        );
        console.log('📡 Subscription created:', progressTracker);
        
        // Timeout in case connection never establishes
        setTimeout(() => {
          console.log('⏰ Connection timeout, proceeding anyway');
          resolve();
        }, 3000);
        
      } catch (error) {
        console.error('💥 Failed to setup progress tracking:', error);
        updateProgressStatus('Failed to setup real-time updates: ' + error.message, 'danger');
        reject(error);
      }
    });
  }
  
  // Legacy sync version for fallback
  function setupProgressTracking(sessionId) {
    console.log('🚀 Setting up progress tracking for session (sync):', sessionId);
    console.log('📊 Current ActionCable state:', {
      ActionCable: typeof ActionCable,
      windowApp: !!window.App,
      appCable: !!(window.App && window.App.cable)
    });
    
    // Final check for ActionCable availability
    if (!checkActionCableAvailability()) {
      console.warn('❌ ActionCable not available, skipping progress tracking');
      updateProgressStatus('Real-time updates not available, using basic mode', 'warning');
      return;
    }
    
    try {
      // Ensure App.cable is initialized
      if (!window.App) {
        window.App = {};
      }
      
      if (!window.App.cable && typeof ActionCable !== 'undefined') {
        console.log('🔧 Initializing App.cable...');
        window.App.cable = ActionCable.createConsumer('/cable');
      }
      
      const consumer = window.App.cable;
      console.log('📡 Using consumer:', consumer);
      
      if (!consumer) {
        throw new Error('No ActionCable consumer available');
      }
      
      progressTracker = consumer.subscriptions.create(
        {
          channel: "FileProcessingChannel", 
          session_id: sessionId
        },
        {
          received: function(data) {
            console.log('📡 ActionCable data received:', data);
            
            if (data.type === 'ping') {
              console.log('🏓 Ping response received:', data.message);
              return;
            }
            
            handleProgressUpdate(data);
          },
          connected: function() {
            console.log('✅ Connected to FileProcessingChannel with session:', sessionId);
            updateProgressStatus('Connected to real-time updates. Processing will begin shortly...');
            
            // Test if the connection is really working by sending a ping
            console.log('🏓 Testing ActionCable connection...');
            this.perform('test_connection');
          },
          disconnected: function() {
            console.log('❌ Disconnected from FileProcessingChannel');
            updateProgressStatus('Lost connection to real-time updates', 'warning');
          },
          rejected: function() {
            console.log('❌ Connection rejected to FileProcessingChannel');
            updateProgressStatus('Connection rejected - channel may not exist', 'danger');
          }
        }
      );
      console.log('📡 Subscription created:', progressTracker);
    } catch (error) {
      console.error('💥 Failed to setup progress tracking:', error);
      updateProgressStatus('Failed to setup real-time updates: ' + error.message, 'danger');
    }
  }
  
  // Handle progress updates from ActionCable
  function handleProgressUpdate(data) {
    console.log('📡 Progress update received:', data);
    console.log('📊 Data breakdown:', {
      file_id: data.file_id,
      filename: data.filename,
      status: data.status,
      progress: data.progress,
      message: data.message
    });
    
    const { file_id, filename, status, progress, message } = data;
    
    // Find corresponding file by name using our mapping
    console.log('🔍 Looking for file in mapping:', filename);
    console.log('🗺️ Current file mapping:', Array.from(fileMapping.entries()));
    
    const fileIndex = fileMapping.get(filename);
    if (fileIndex === undefined) {
      console.warn('❌ File not found in mapping:', filename);
      console.log('📋 Available files in mapping:', Array.from(fileMapping.keys()));
      return;
    }
    
    console.log('✅ Found file at index:', fileIndex);
    
    const fileItem = document.getElementById(`file-${fileIndex}`);
    const statusSpan = document.getElementById(`file-status-${fileIndex}`);
    const iconSpan = document.getElementById(`file-icon-${fileIndex}`);
    
    if (!fileItem || !statusSpan) {
      console.warn('File UI elements not found for index:', fileIndex);
      return;
    }
    
    // Update status and visual indicators
    if (status === 'started') {
      statusSpan.textContent = 'Processing...';
      iconSpan.className = 'fas fa-spinner fa-spin text-primary';
      fileItem.className = 'mb-2 p-2 border rounded bg-primary text-white';
      updateProgressStatus(`Processing ${filename}...`);
    } else if (status === 'processing') {
      statusSpan.textContent = `${progress}% - ${message}`;
      iconSpan.className = 'fas fa-cog fa-spin text-primary';
    } else if (status === 'completed') {
      statusSpan.textContent = 'Complete ✓';
      iconSpan.className = 'fas fa-check-circle text-success';
      fileItem.className = 'mb-2 p-2 border rounded bg-success text-white';
      calculateOverallProgress();
    } else if (status === 'error') {
      statusSpan.textContent = 'Error: ' + message;
      iconSpan.className = 'fas fa-exclamation-circle text-danger';
      fileItem.className = 'mb-2 p-2 border rounded bg-danger text-white';
      calculateOverallProgress();
    }
  }
  
  // Calculate overall progress based on completed files
  function calculateOverallProgress() {
    const fileStatusList = document.getElementById('file-status-list');
    if (!fileStatusList) return;
    
    const totalFiles = fileStatusList.children.length;
    let completedFiles = 0;
    let errorFiles = 0;
    
    for (const fileItem of fileStatusList.children) {
      if (fileItem.className.includes('bg-success')) {
        completedFiles++;
      } else if (fileItem.className.includes('bg-danger')) {
        completedFiles++;
        errorFiles++;
      }
    }
    
    const percentage = Math.round((completedFiles / totalFiles) * 100);
    updateOverallProgress(percentage);
    
    if (completedFiles === totalFiles) {
      const successFiles = completedFiles - errorFiles;
      if (errorFiles > 0) {
        updateProgressStatus(`Processing complete! ${successFiles} successful, ${errorFiles} failed. Check the Documents page for details.`);
      } else {
        updateProgressStatus('🎉 All files processed successfully! Redirecting...');
      }
      
      // Redirect after a short delay
      setTimeout(() => {
        window.location.href = '/documents';
      }, 3000);
    } else {
      const processingFiles = totalFiles - completedFiles;
      updateProgressStatus(`Processing ${completedFiles}/${totalFiles} files (${processingFiles} remaining)...`);
    }
  }
  
  // Update overall progress bar
  function updateOverallProgress(percentage) {
    const progressBar = document.getElementById('overall-progress-bar');
    const percentageSpan = document.getElementById('overall-percentage');
    
    if (progressBar) {
      progressBar.style.width = percentage + '%';
      progressBar.setAttribute('aria-valuenow', percentage);
      progressBar.textContent = percentage + '%';
      
      if (percentage === 100) {
        progressBar.className = 'progress-bar bg-success';
      }
    }
    
    if (percentageSpan) {
      percentageSpan.textContent = percentage + '%';
    }
  }
  
  // Update progress status message
  function updateProgressStatus(message, type = 'info') {
    const statusEl = document.getElementById('progress-status');
    if (statusEl) {
      statusEl.textContent = message;
      statusEl.className = `text-${type === 'danger' ? 'danger' : 'muted'} mt-2 d-block`;
    }
  }
  
  // Reliable upload form handler
  const reliableForm = document.getElementById('reliable-upload-form');
  if (reliableForm) {
    reliableForm.addEventListener('submit', function() {
      const submitBtn = document.getElementById('reliable-upload-btn');
      if (submitBtn) {
        submitBtn.disabled = true;
        submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Uploading...';
      }
    });
  }
  
  // Directory upload form handler
  const directoryForm = document.getElementById('directory-upload-form');
  if (directoryForm) {
    directoryForm.addEventListener('submit', function() {
      const submitBtn = document.getElementById('directory-upload-btn');
      const processingAlert = document.getElementById('directory-processing-alert');
      
      if (submitBtn) {
        const spinner = submitBtn.querySelector('.spinner-border');
        const btnText = submitBtn.querySelector('.btn-text');
        
        submitBtn.disabled = true;
        if (spinner) spinner.classList.remove('d-none');
        if (btnText) btnText.textContent = 'Importing...';
      }
      
      if (processingAlert) {
        processingAlert.classList.remove('d-none');
      }
    });
  }
  
  // Text content form handler
  const textForms = document.querySelectorAll('form');
  textForms.forEach(function(form) {
    if (form.querySelector('textarea[name*="text_content"]')) {
      form.addEventListener('submit', function() {
        const submitBtn = document.getElementById('text-content-btn');
        if (submitBtn) {
          submitBtn.disabled = true;
          submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Processing...';
        }
      });
    }
  });
  
  // Form validation
  const forms = document.querySelectorAll('.needs-validation');
  forms.forEach(function(form) {
    form.addEventListener('submit', function(event) {
      if (!form.checkValidity()) {
        event.preventDefault();
        event.stopPropagation();
      }
      form.classList.add('was-validated');
    }, false);
  });
});
</script>