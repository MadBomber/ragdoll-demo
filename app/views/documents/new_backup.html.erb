<% content_for :title, "Add Document - Ragdoll Engine Demo" %>

<script>
console.log('üö® TEST 1: Basic script execution works');

// Wait for the entire page to load before looking for form elements
document.addEventListener('DOMContentLoaded', function() {
  console.log('üö® TEST 2: DOM loaded, checking for form elements');
  
  const form = document.getElementById('async-upload-form');
  console.log('üö® TEST 3: Form element found:', form ? 'YES' : 'NO');
  
  if (form) {
    console.log('üö® TEST 4: Form action:', form.action);
    console.log('üö® TEST 5: Adding form submit listener');
    
    form.addEventListener('submit', async function(e) {
      e.preventDefault();
      console.log('üö® Form intercepted - starting file upload with progress tracking');
      
      const fileInput = form.querySelector('input[type="file"]');
      const submitButton = form.querySelector('button[type="submit"]');
      
      if (!fileInput || !fileInput.files.length) {
        alert('Please select at least one file.');
        return false;
      }
      
      // Show selected files with animated progress bar
      const progressContainer = document.getElementById('progress-bars-container');
      if (progressContainer) {
        progressContainer.style.display = 'block';
        progressContainer.innerHTML = `
          <h5>üì§ Upload Progress</h5>
          
          <div class="mb-3">
            <strong>File Status:</strong>
            <div id="file-status-list" class="mt-2">
              ${Array.from(fileInput.files).map((file, index) => `
                <div id="file-${index}" class="d-flex align-items-center mb-2 p-2 border rounded bg-light">
                  <span id="file-icon-${index}" class="me-2" style="font-size: 1.2em;">‚è≥</span>
                  <span class="flex-grow-1">${file.name}</span>
                  <small id="file-status-${index}" class="text-muted">Queued for upload...</small>
                </div>
              `).join('')}
            </div>
          </div>
          
          <div class="mb-3">
            <div class="d-flex justify-content-between mb-1">
              <span><strong>Overall Progress:</strong></span>
              <span id="upload-percentage">0%</span>
            </div>
            <div class="progress mb-2" style="height: 25px;">
              <div id="upload-progress-bar" 
                   class="progress-bar progress-bar-striped progress-bar-animated bg-primary" 
                   role="progressbar" 
                   style="width: 0%" 
                   aria-valuenow="0" 
                   aria-valuemin="0" 
                   aria-valuemax="100">
                0%
              </div>
            </div>
            <small id="upload-status" class="text-muted">Preparing upload...</small>
          </div>
        `;
      }
      
      // Function to update progress bar
      function updateProgress(percentage, status) {
        const progressBar = document.getElementById('upload-progress-bar');
        const percentageSpan = document.getElementById('upload-percentage');
        const statusSpan = document.getElementById('upload-status');
        
        if (progressBar) {
          progressBar.style.width = percentage + '%';
          progressBar.setAttribute('aria-valuenow', percentage);
          progressBar.textContent = percentage + '%';
        }
        if (percentageSpan) {
          percentageSpan.textContent = percentage + '%';
        }
        if (statusSpan) {
          statusSpan.textContent = status;
        }
      }
      
      // Function to update individual file status
      function updateFileStatus(fileIndex, icon, status, backgroundColor = 'bg-light') {
        const fileIcon = document.getElementById('file-icon-' + fileIndex);
        const fileStatus = document.getElementById('file-status-' + fileIndex);
        const fileContainer = document.getElementById('file-' + fileIndex);
        
        if (fileIcon) fileIcon.textContent = icon;
        if (fileStatus) fileStatus.textContent = status;
        if (fileContainer) {
          fileContainer.className = fileContainer.className.replace(/bg-\w+/, backgroundColor);
        }
      }
      
      // Function to calculate and update overall progress based on completed files
      function updateOverallProgress() {
        const totalFiles = fileInput.files.length;
        let completedFiles = 0;
        let errorFiles = 0;
        
        // Count completed and error files
        for (let i = 0; i < totalFiles; i++) {
          const fileIcon = document.getElementById('file-icon-' + i);
          if (fileIcon) {
            const icon = fileIcon.textContent;
            if (icon === '‚úÖ') completedFiles++;
            if (icon === '‚ùå') errorFiles++;
          }
        }
        
        // Calculate percentage
        const processedFiles = completedFiles + errorFiles;
        const percentage = Math.round((processedFiles / totalFiles) * 100);
        
        // Update progress bar and status
        let statusText;
        if (processedFiles === totalFiles) {
          statusText = `All files processed! (${completedFiles} successful, ${errorFiles} failed)`;
        } else {
          statusText = `Processing files... (${processedFiles}/${totalFiles} complete)`;
        }
        
        updateProgress(percentage, statusText);
        
        console.log(`Overall progress: ${processedFiles}/${totalFiles} files (${percentage}%)`);
      }
      
      // Function to setup ActionCable for real-time updates (simplified)
      function setupProgressTracking(sessionId) {
        try {
          if (typeof ActionCable !== 'undefined' && window.App && window.App.cable) {
            console.log('Setting up ActionCable progress tracking for session:', sessionId);
            
            const subscription = window.App.cable.subscriptions.create({
              channel: "FileProcessingChannel",
              session_id: sessionId
            }, {
              received: function(data) {
                console.log('ActionCable received:', data);
                const filename = data.filename;
                const status = data.status;
                const message = data.message;
                
                // Find the file index by matching filename
                const files = Array.from(fileInput.files);
                const fileIndex = files.findIndex(function(file) { return file.name === filename; });
                
                if (fileIndex !== -1) {
                  if (status === 'started') {
                    updateFileStatus(fileIndex, 'üîÑ', 'Processing...', 'bg-warning');
                  } else if (status === 'processing') {
                    updateFileStatus(fileIndex, '‚öôÔ∏è', message || 'Processing...', 'bg-warning');
                  } else if (status === 'completed') {
                    updateFileStatus(fileIndex, '‚úÖ', 'Complete!', 'bg-success');
                    updateOverallProgress(); // Update overall progress when file completes
                  } else if (status === 'error') {
                    updateFileStatus(fileIndex, '‚ùå', message || 'Error', 'bg-danger');
                    updateOverallProgress(); // Update overall progress when file errors
                  }
                }
              },
              connected: function() {
                console.log('‚úÖ Connected to FileProcessingChannel');
              },
              disconnected: function() {
                console.log('‚ùå Disconnected from FileProcessingChannel');
              }
            });
            
            return subscription;
          } else {
            console.log('ActionCable not available - using fallback status updates');
            return null;
          }
        } catch (error) {
          console.error('Error setting up ActionCable:', error);
          return null;
        }
      }
      
      // Disable submit button
      if (submitButton) {
        submitButton.disabled = true;
        submitButton.innerHTML = '‚è≥ Processing Files...';
      }
      
      try {
        // Create form data and send to upload_async endpoint
        const formData = new FormData(form);
        const csrfToken = document.querySelector('meta[name="csrf-token"]');
        
        // Start upload
        updateProgress(0, 'Uploading files to server...');
        
        console.log('Sending files to server...');
        
        const response = await fetch(form.action, {
          method: 'POST',
          body: formData,
          headers: {
            'X-CSRF-Token': csrfToken ? csrfToken.content : ''
          }
        });
        
        updateProgress(0, 'Files uploaded - starting background processing...');
        
        const result = await response.json();
        console.log('Server response:', result);
        
        if (result.success) {
          // Set up ActionCable to track individual file progress
          const subscription = setupProgressTracking(result.session_id);
          
          // Update file status to show they're being processed
          Array.from(fileInput.files).forEach((file, index) => {
            updateFileStatus(index, 'üì§', 'Uploaded - queued for processing...', 'bg-info');
          });
          
          // Set initial progress to 0% since no files are processed yet
          updateProgress(0, `Processing 0/${fileInput.files.length} files...`);
          
          // Wait a moment to show 100%, then show success message
          setTimeout(() => {
            if (progressContainer) {
              progressContainer.innerHTML = `
                <h5>üì§ Upload Progress</h5>
                <div class="mb-3">
                  <div class="progress mb-2" style="height: 25px;">
                    <div class="progress-bar bg-success" 
                         role="progressbar" 
                         style="width: 100%" 
                         aria-valuenow="100" 
                         aria-valuemin="0" 
                         aria-valuemax="100">
                      ‚úÖ 100% Complete
                    </div>
                  </div>
                </div>
                <div class="alert alert-success">
                  <h5>‚úÖ Upload Successful!</h5>
                  <p><strong>${result.message}</strong></p>
                  <p>Files are being processed in the background. Check the <a href="/documents">Documents page</a> to see results.</p>
                </div>
              `;
            }
          }, 1000);
          
        
          
          // Clear file input
          fileInput.value = '';
          
          alert('‚úÖ Files uploaded successfully! Check the Documents page to see your files.');
          
        } else {
          throw new Error(result.error || 'Upload failed');
        }
        
      } catch (error) {
        console.error('Upload error:', error);
        
        if (progressContainer) {
          progressContainer.innerHTML = `
            <div class="alert alert-danger">
              <h5>‚ùå Upload Failed</h5>
              <p><strong>Error:</strong> ${error.message}</p>
              <p>Please try again or use the reliable upload method below.</p>
            </div>
          `;
        }
        
        alert('Upload failed: ' + error.message);
      }
      
      // Re-enable submit button
      if (submitButton) {
        submitButton.disabled = false;
        submitButton.innerHTML = '<i class="fas fa-upload me-2"></i><span class="btn-text">Upload Files with Progress</span>';
      }
      
      return false;
    });
    
    console.log('üö® TEST 6: Form submit listener added successfully');
    alert('üö® READY: Form handler is now active - try uploading files!');
  } else {
    alert('üö® ERROR: Form not found even after DOM loaded');
    console.log('üö® ERROR: async-upload-form element not found after DOM load');
    console.log('üö® Available form elements:', document.querySelectorAll('form'));
  }
});
</script>

<div style="background: red; color: white; padding: 20px; margin: 20px;">
  <h1>üö® DEBUGGING MODE ACTIVE</h1>
  <p>If you see this red box but NO alert popup, JavaScript is disabled.</p>
  <p>If you see both the red box AND alert popup, JavaScript is working.</p>
</div>

<div class="row">
  <div class="col-12">
    <div class="d-flex justify-content-between align-items-center mb-4">
      <h1><i class="fas fa-plus"></i> Add Document</h1>
      <%= link_to "Back to Documents", documents_path, class: "btn btn-outline-secondary" %>
    </div>
  </div>
</div>

<div class="row">
  <div class="col-md-8">
    <div class="card">
      <div class="card-header">
        <ul class="nav nav-tabs card-header-tabs" role="tablist">
          <li class="nav-item">
            <a class="nav-link active" id="file-tab" data-bs-toggle="tab" href="#file-upload" role="tab">
              <i class="fas fa-upload"></i> Upload Files
            </a>
          </li>
          <li class="nav-item">
            <a class="nav-link" id="text-tab" data-bs-toggle="tab" href="#text-content" role="tab">
              <i class="fas fa-keyboard"></i> Text Content
            </a>
          </li>
          <li class="nav-item">
            <a class="nav-link" id="directory-tab" data-bs-toggle="tab" href="#directory-upload" role="tab">
              <i class="fas fa-folder"></i> Directory
            </a>
          </li>
        </ul>
      </div>
      <div class="card-body">
        <div class="tab-content">
          <!-- File Upload Tab -->
          <div class="tab-pane fade show active" id="file-upload" role="tabpanel">
            <!-- WebSocket Status and Firefox Help -->
            <div id="actioncable-status" class="alert alert-info">
              Checking real-time capabilities...
            </div>
            
            <!-- Firefox CDN Blocking Notice -->
            <div id="firefox-help" class="alert alert-warning" style="display: none;">
              <strong>‚ö†Ô∏è Firefox Users:</strong> If you're not seeing progress bars and the upload button doesn't work:
              <ol class="mb-2">
                <li>Look for a shield icon üõ°Ô∏è in your address bar</li>
                <li>Click it and select "Turn off Enhanced Tracking Protection for this site"</li>
                <li>Or try the "Standard Upload" below which works without JavaScript</li>
              </ol>
              <small><strong>Why?</strong> Firefox blocks external JavaScript (Bootstrap, ActionCable) needed for the progress display.</small>
            </div>
            <!-- Async Upload Form -->
            <form id="async-upload-form" 
                  action="<%= upload_async_documents_path %>"
                  method="post" 
                  enctype="multipart/form-data"
                  class="needs-validation"
                  novalidate="novalidate">
              
              <%= hidden_field_tag :authenticity_token, form_authenticity_token %>
              
              <div class="mb-3">
                <label for="document_files" class="form-label">Select Files</label>
                <input type="file" 
                       name="ragdoll_document[files][]" 
                       id="document_files"
                       multiple="multiple" 
                       accept=".pdf,.docx,.txt,.md,.html,.json,.xml,.csv" 
                       class="form-control" 
                       required="required">
                <div class="form-text">
                  Supported formats: PDF, DOCX, TXT, MD, HTML, JSON, XML, CSV
                </div>
                <div class="invalid-feedback">
                  Please select at least one file.
                </div>
              </div>
              
              <div class="mb-3">
                <label for="document_metadata" class="form-label">Metadata (Optional)</label>
                <textarea name="ragdoll_document[metadata]" 
                          id="document_metadata"
                          placeholder='{"author": "John Doe", "category": "technical"}' 
                          class="form-control" 
                          rows="3"></textarea>
                <div class="form-text">
                  Additional metadata in JSON format
                </div>
              </div>
              
              <button type="submit" class="btn btn-primary" id="upload-files-btn">
                <i class="fas fa-upload me-2"></i>
                <span class="btn-text">Upload Files with Progress</span>
              </button>
            </form>

            <!-- Progress Bars Container -->
            <div id="progress-bars-container" class="mt-4" style="display: none;">
              <h5 class="mb-3">
                <i class="fas fa-tasks me-2"></i>Upload Progress
              </h5>
              <!-- Progress bars will be dynamically added here -->
            </div>

            <!-- Reliable Upload Method (Always Works) -->
            <div class="mt-3" id="standard-upload-section">
              <hr>
              <h6 class="text-primary">‚úÖ Reliable Upload (Always Works)</h6>
              <p class="text-muted small">This upload method works regardless of JavaScript or browser settings.</p>
              
              <%= form_with model: @document, url: documents_path, local: true, multipart: true, class: "needs-validation", novalidate: true, as: :ragdoll_document, id: "standard-upload-form" do |form| %>
                <div class="mb-3">
                  <label for="standard_files" class="form-label">Select Files</label>
                  <%= form.file_field :files, multiple: true, accept: ".pdf,.docx,.txt,.md,.html,.json,.xml,.csv", class: "form-control", id: "standard_files" %>
                  <div class="form-text">
                    Files will be processed in the background. Check the Documents page for results.
                  </div>
                </div>
                
                <div class="mb-3">
                  <label for="standard_metadata" class="form-label">Metadata (Optional)</label>
                  <%= form.text_area :metadata, placeholder: '{"author": "Your Name", "category": "documentation"}', class: "form-control", rows: 2, id: "standard_metadata" %>
                </div>
                
                <button type="submit" class="btn btn-success">
                  üìÅ Upload Files (Reliable Method)
                </button>
              <% end %>
            </div>
          </div>
          
          <!-- Text Content Tab -->
          <div class="tab-pane fade" id="text-content" role="tabpanel">
            <%= form_with model: @document, url: documents_path, local: true, class: "needs-validation", novalidate: true, as: :ragdoll_document do |form| %>
              <div class="mb-3">
                <label for="document_title" class="form-label">Title</label>
                <%= form.text_field :title, placeholder: "Enter document title", class: "form-control", required: true %>
                <div class="invalid-feedback">
                  Please provide a title.
                </div>
              </div>
              
              <div class="mb-3">
                <label for="document_text_content" class="form-label">Content</label>
                <%= form.text_area :text_content, placeholder: "Enter your text content here...", class: "form-control", rows: 10, required: true %>
                <div class="invalid-feedback">
                  Please provide some content.
                </div>
              </div>
              
              <div class="mb-3">
                <label for="document_metadata" class="form-label">Metadata (Optional)</label>
                <%= form.text_area :metadata, placeholder: '{"author": "John Doe", "category": "technical"}', class: "form-control", rows: 3 %>
                <div class="form-text">
                  Additional metadata in JSON format
                </div>
              </div>
              
              <%= form.submit "Add Document", class: "btn btn-primary" %>
            <% end %>
          </div>
          
          <!-- Directory Upload Tab -->
          <div class="tab-pane fade" id="directory-upload" role="tabpanel">
            <%= form_with url: bulk_upload_documents_path, method: :post, local: true, class: "needs-validation", novalidate: true, id: "directory-upload-form" do |form| %>
              <div class="mb-3">
                <label for="directory_path" class="form-label">Directory Path</label>
                <%= form.text_field :directory_path, placeholder: "/path/to/documents", class: "form-control", required: true %>
                <div class="form-text">
                  Full path to directory containing documents to import
                </div>
                <div class="invalid-feedback">
                  Please provide a valid directory path.
                </div>
              </div>
              
              <div class="alert alert-info">
                <i class="fas fa-info-circle"></i>
                <strong>Note:</strong> This will recursively process all supported files in the specified directory.
                Large directories may take some time to process.
              </div>
              
              <button type="submit" class="btn btn-warning" id="import-directory-btn">
                <span class="spinner-border spinner-border-sm d-none me-2" role="status" aria-hidden="true"></span>
                <span class="btn-text">Import Directory</span>
              </button>
              
              <div class="alert alert-warning mt-3 d-none" id="processing-alert">
                <i class="fas fa-spinner fa-spin"></i>
                <strong>Processing...</strong> Your directory is being imported. This may take several minutes for large directories.
                Please do not close this page.
              </div>
            <% end %>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <div class="col-md-4">
    <div class="card">
      <div class="card-header">
        <h5><i class="fas fa-info-circle"></i> Upload Information</h5>
      </div>
      <div class="card-body">
        <h6>Supported File Types:</h6>
        <ul class="list-unstyled">
          <li><i class="fas fa-file-pdf text-danger"></i> PDF Documents</li>
          <li><i class="fas fa-file-word text-primary"></i> Word Documents (.docx)</li>
          <li><i class="fas fa-file-alt text-secondary"></i> Text Files (.txt, .md)</li>
          <li><i class="fas fa-file-code text-warning"></i> HTML Files</li>
          <li><i class="fas fa-file-code text-info"></i> JSON/XML Files</li>
          <li><i class="fas fa-file-csv text-success"></i> CSV Files</li>
        </ul>
        
        <hr>
        
        <h6>Processing:</h6>
        <ul class="list-unstyled">
          <li><i class="fas fa-cogs text-primary"></i> Automatic content extraction</li>
          <li><i class="fas fa-cut text-success"></i> Intelligent text chunking</li>
          <li><i class="fas fa-vector-square text-info"></i> Vector embedding generation</li>
          <li><i class="fas fa-search text-warning"></i> Search optimization</li>
        </ul>
        
        <hr>
        
        <h6>Features:</h6>
        <ul class="list-unstyled">
          <li><i class="fas fa-tags text-primary"></i> Metadata extraction</li>
          <li><i class="fas fa-language text-success"></i> Multi-language support</li>
          <li><i class="fas fa-chart-line text-info"></i> Usage analytics</li>
          <li><i class="fas fa-sync text-warning"></i> Reprocessing support</li>
        </ul>
      </div>
    </div>
  </div>
</div>

<script>
console.log('üî• STEP 2: Main script section reached');

try {
  console.log('üî• STEP 3: Starting FileUploadProgress class definition');
  alert('üî• JavaScript is working! About to define FileUploadProgress class');

  // File upload progress tracking with ActionCable WebSockets
  class FileUploadProgress {
  constructor() {
    this.consumer = null
    this.channel = null
    this.sessionId = null
    this.fileProgressBars = new Map()
  }

  initialize(sessionId) {
    this.sessionId = sessionId
    console.log('Initializing ActionCable with session ID:', sessionId)
    
    // Check if ActionCable is available
    if (typeof ActionCable === 'undefined') {
      console.error('ActionCable not loaded!')
      return
    }
    
    // Use global ActionCable from CDN
    this.consumer = ActionCable.createConsumer('/cable')
    console.log('ActionCable consumer created:', this.consumer)
    
    this.channel = this.consumer.subscriptions.create(
      {
        channel: "FileProcessingChannel",
        session_id: sessionId
      },
      {
        received: (data) => {
          console.log('ActionCable received data:', data)
          this.handleProgressUpdate(data)
        },
        connected: () => {
          console.log("‚úÖ Connected to FileProcessingChannel")
        },
        disconnected: () => {
          console.log("‚ùå Disconnected from FileProcessingChannel")
        },
        rejected: () => {
          console.log("üö´ Connection to FileProcessingChannel rejected")
        }
      }
    )
    console.log('ActionCable channel created:', this.channel)
  }

  handleProgressUpdate(data) {
    console.log("Progress update:", data)
    
    const { file_id, filename, status, progress, message, document_id, document_url } = data
    
    if (status === 'started') {
      this.createProgressBar(file_id, filename)
    } else if (status === 'processing') {
      this.updateProgressBar(file_id, progress, message)
    } else if (status === 'completed') {
      this.completeProgressBar(file_id, message, document_url)
      // Remove progress bar after 3 seconds
      setTimeout(() => this.removeProgressBar(file_id), 3000)
    } else if (status === 'error') {
      this.errorProgressBar(file_id, message)
      // Remove progress bar after 5 seconds on error
      setTimeout(() => this.removeProgressBar(file_id), 5000)
    }
  }

  createProgressBar(fileId, filename) {
    const container = document.getElementById('progress-bars-container')
    if (!container) return

    const progressBarHtml = `
      <div class="progress-bar-item card mb-3" data-file-id="${fileId}">
        <div class="card-body">
          <div class="d-flex justify-content-between align-items-center mb-2">
            <h6 class="card-title mb-0">
              <i class="fas fa-file-alt me-2"></i>${filename}
            </h6>
            <span class="badge bg-info">Processing</span>
          </div>
          <div class="progress mb-2">
            <div class="progress-bar progress-bar-striped progress-bar-animated bg-primary" 
                 role="progressbar" 
                 style="width: 0%" 
                 aria-valuenow="0" 
                 aria-valuemin="0" 
                 aria-valuemax="100">
            </div>
          </div>
          <small class="text-muted progress-message">Initializing...</small>
        </div>
      </div>
    `
    
    container.insertAdjacentHTML('beforeend', progressBarHtml)
    this.fileProgressBars.set(fileId, container.querySelector('[data-file-id="' + fileId + '"]'))
  }

  updateProgressBar(fileId, progress, message) {
    const progressBarItem = this.fileProgressBars.get(fileId)
    if (!progressBarItem) return

    const progressBar = progressBarItem.querySelector('.progress-bar')
    const progressMessage = progressBarItem.querySelector('.progress-message')
    
    if (progressBar) {
      progressBar.style.width = progress + '%'
      progressBar.setAttribute('aria-valuenow', progress)
    }
    
    if (progressMessage) {
      progressMessage.textContent = message
    }
  }

  completeProgressBar(fileId, message, documentUrl) {
    const progressBarItem = this.fileProgressBars.get(fileId)
    if (!progressBarItem) return

    const progressBar = progressBarItem.querySelector('.progress-bar')
    const progressMessage = progressBarItem.querySelector('.progress-message')
    const badge = progressBarItem.querySelector('.badge')
    const cardBody = progressBarItem.querySelector('.card-body')
    
    if (progressBar) {
      progressBar.style.width = '100%'
      progressBar.setAttribute('aria-valuenow', 100)
      progressBar.classList.remove('progress-bar-striped', 'progress-bar-animated', 'bg-primary')
      progressBar.classList.add('bg-success')
    }
    
    if (progressMessage) {
      progressMessage.textContent = message
    }
    
    if (badge) {
      badge.textContent = 'Complete'
      badge.classList.remove('bg-info')
      badge.classList.add('bg-success')
    }
    
    if (documentUrl && cardBody) {
      const viewButton = '<div class="mt-2"><a href="' + documentUrl + '" class="btn btn-sm btn-outline-primary"><i class="fas fa-eye me-1"></i>View Document</a></div>'
      cardBody.insertAdjacentHTML('beforeend', viewButton)
    }
  }

  errorProgressBar(fileId, message) {
    const progressBarItem = this.fileProgressBars.get(fileId)
    if (!progressBarItem) return

    const progressBar = progressBarItem.querySelector('.progress-bar')
    const progressMessage = progressBarItem.querySelector('.progress-message')
    const badge = progressBarItem.querySelector('.badge')
    
    if (progressBar) {
      progressBar.classList.remove('progress-bar-striped', 'progress-bar-animated', 'bg-primary')
      progressBar.classList.add('bg-danger')
    }
    
    if (progressMessage) {
      progressMessage.textContent = message
      progressMessage.classList.remove('text-muted')
      progressMessage.classList.add('text-danger')
    }
    
    if (badge) {
      badge.textContent = 'Error'
      badge.classList.remove('bg-info')
      badge.classList.add('bg-danger')
    }
  }

  removeProgressBar(fileId) {
    const progressBarItem = this.fileProgressBars.get(fileId)
    if (progressBarItem) {
      progressBarItem.style.transition = 'opacity 0.5s ease-out'
      progressBarItem.style.opacity = '0'
      
      setTimeout(() => {
        progressBarItem.remove()
        this.fileProgressBars.delete(fileId)
      }, 500)
    }
  }

  disconnect() {
    if (this.channel) {
      this.channel.unsubscribe()
    }
    if (this.consumer) {
      this.consumer.disconnect()
    }
  }
}

// Export for global use
window.FileUploadProgress = FileUploadProgress

// Form validation
(function() {
  'use strict';
  window.addEventListener('load', function() {
    var forms = document.getElementsByClassName('needs-validation');
    var validation = Array.prototype.filter.call(forms, function(form) {
      form.addEventListener('submit', function(event) {
        if (form.checkValidity() === false) {
          event.preventDefault();
          event.stopPropagation();
        }
        form.classList.add('was-validated');
      }, false);
    });
  }, false);
})();

console.log('üöÄ JavaScript loaded successfully!')

// Directory upload and text form feedback
document.addEventListener('DOMContentLoaded', function() {
  console.log('üìÑ DOM Content Loaded!')
  
  // Comprehensive JavaScript dependency check
  console.log('üîç Testing JavaScript dependencies:')
  
  const acAvailable = (typeof ActionCable !== 'undefined')
  const bootstrapAvailable = (typeof bootstrap !== 'undefined')  
  const jQueryAvailable = (typeof $ !== 'undefined')
  
  console.log('- ActionCable available:', acAvailable)
  console.log('- Bootstrap available:', bootstrapAvailable)
  console.log('- jQuery available:', jQueryAvailable)
  console.log('- User Agent:', navigator.userAgent)
  
  // Test if we can create ActionCable consumer
  let acWorking = false
  if (acAvailable) {
    try {
      const testConsumer = ActionCable.createConsumer('/cable')
      console.log('‚úÖ ActionCable consumer test successful:', testConsumer)
      acWorking = true
    } catch (e) {
      console.error('‚ùå ActionCable consumer test failed:', e)
    }
  }
  
  // Update on-page status with detailed information
  const acStatusEl = document.getElementById('actioncable-status')
  const firefoxHelpEl = document.getElementById('firefox-help')
  
  if (acStatusEl) {
    if (acWorking) {
      acStatusEl.className = 'alert alert-success'
      acStatusEl.innerHTML = `
        ‚úÖ Real-time progress updates enabled<br>
        <small>ActionCable: ‚úì Bootstrap: ${bootstrapAvailable ? '‚úì' : '‚úó'}</small>
      `
    } else {
      acStatusEl.className = 'alert alert-warning'
      acStatusEl.innerHTML = `
        ‚ö†Ô∏è Limited functionality detected<br>
        <small>ActionCable: ${acAvailable ? '‚úì' : '‚úó'} Bootstrap: ${bootstrapAvailable ? '‚úì' : '‚úó'}</small><br>
        <strong>Try refreshing the page or use the reliable upload below.</strong>
      `
      
      // Show Firefox help for users with issues
      if (firefoxHelpEl) {
        firefoxHelpEl.style.display = 'block'
      }
    }
  }
  
  // Handle async file upload form
  const uploadForm = document.getElementById('async-upload-form')
  console.log('üîç Upload form found:', uploadForm ? 'yes' : 'no')
  console.log('üîç Upload form element:', uploadForm)
  console.log('üîç Upload form action:', uploadForm ? uploadForm.action : 'no form')
  console.log('üîç Upload form method:', uploadForm ? uploadForm.method : 'no form')
  
  if (uploadForm) {
    console.log('‚úÖ Adding submit event listener to upload form')
    
    // Test button click handler
    const submitButton = uploadForm.querySelector('button[type="submit"]')
    if (submitButton) {
      console.log('‚úÖ Adding click event listener to submit button')
      submitButton.addEventListener('click', function(e) {
        console.log('üö® BUTTON CLICKED! Event:', e)
      })
    }
    
    uploadForm.addEventListener('submit', async function(e) {
      console.log('üö® FORM SUBMIT EVENT INTERCEPTED! Preventing default...')
      e.preventDefault()
      console.log('‚úÖ Default prevented, starting custom upload handler')
      
      const formData = new FormData(uploadForm)
      const submitButton = uploadForm.querySelector('button[type="submit"]')
      const fileInput = uploadForm.querySelector('input[type="file"]')
      
      console.log('Files selected:', fileInput ? fileInput.files.length : 'no input found')
      
      if (!fileInput || !fileInput.files.length) {
        alert('Please select at least one file.')
        return
      }
      
      // Log file names
      for (let i = 0; i < fileInput.files.length; i++) {
        console.log('File', i + 1, ':', fileInput.files[i].name)
      }
      
      // Disable submit button and show loading
      if (submitButton) {
        submitButton.disabled = true
        const originalText = submitButton.innerHTML
        submitButton.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Starting upload...'
        
        // Re-enable button after upload starts
        setTimeout(() => {
          submitButton.disabled = false
          submitButton.innerHTML = originalText
        }, 2000)
      }
      
      // Show progress container immediately
      const progressContainer = document.getElementById('progress-bars-container')
      console.log('Progress container found:', progressContainer ? 'yes' : 'no')
      if (progressContainer) {
        progressContainer.style.display = 'block'
        progressContainer.innerHTML = '<div class="alert alert-info">Preparing uploads...</div>'
      }

      try {
        console.log('Sending request to:', uploadForm.action)
        const csrfToken = document.querySelector('meta[name="csrf-token"]')
        console.log('CSRF token found:', csrfToken ? 'yes' : 'no')
        
        const response = await fetch(uploadForm.action, {
          method: 'POST',
          body: formData,
          headers: {
            'X-CSRF-Token': csrfToken ? csrfToken.content : ''
          }
        })
        
        console.log('Response status:', response.status)
        console.log('Response headers:', response.headers)
        
        if (!response.ok) {
          throw new Error('HTTP error! status: ' + response.status)
        }
        
        const result = await response.json()
        console.log('Response data:', result)
        
        if (result.success && result.session_id) {
          // Clear the preparing message
          if (progressContainer) {
            progressContainer.innerHTML = ''
          }
          
          // Initialize progress tracking
          console.log('Initializing progress tracking with session:', result.session_id)
          const progressTracker = new FileUploadProgress()
          progressTracker.initialize(result.session_id)
          
          // Store reference for cleanup
          window.currentProgressTracker = progressTracker
          
          // Clear file input
          fileInput.value = ''
          
          console.log('Upload started successfully:', result.message)
        } else {
          console.error('Upload failed:', result.error)
          alert(result.error || 'Upload failed')
        }
        
      } catch (error) {
        console.error('Upload error:', error)
        alert('Upload failed: ' + error.message)
        
        // Show error in progress container
        if (progressContainer) {
          progressContainer.innerHTML = '<div class="alert alert-danger">Upload failed: ' + error.message + '</div>'
        }
      }
    })
  } else {
    console.log('‚ùå Upload form not found! Cannot set up progress tracking.')
    console.log('üîç All forms on page:', document.querySelectorAll('form'))
    console.log('üîç All elements with async-upload-form id:', document.querySelectorAll('#async-upload-form'))
  }

  // Directory upload feedback
  const directoryForm = document.getElementById('directory-upload-form');
  const importBtn = document.getElementById('import-directory-btn');
  const processingAlert = document.getElementById('processing-alert');
  
  if (directoryForm) {
    directoryForm.addEventListener('submit', function(e) {
      if (!directoryForm.checkValidity()) {
        return;
      }
      
      const spinner = importBtn.querySelector('.spinner-border');
      const btnText = importBtn.querySelector('.btn-text');
      
      importBtn.disabled = true;
      spinner.classList.remove('d-none');
      btnText.textContent = 'Importing...';
      processingAlert.classList.remove('d-none');
      directoryForm.classList.add('processing');
    });
  }
  
  // Handle text content form (standard upload form still needs feedback)
  const standardForm = document.getElementById('standard-upload-form');
  if (standardForm) {
    standardForm.addEventListener('submit', function(e) {
      const submitBtn = standardForm.querySelector('button[type="submit"]');
      if (submitBtn) {
        submitBtn.disabled = true;
        submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Uploading...';
      }
    });
  }
  
  // Handle text content form
  const textForms = document.querySelectorAll('form');
  textForms.forEach(function(form) {
    if (form.querySelector('textarea[name*="text_content"]')) {
      form.addEventListener('submit', function(e) {
        const submitBtn = form.querySelector('button[type="submit"], input[type="submit"]');
        if (submitBtn) {
          submitBtn.disabled = true;
          if (submitBtn.tagName === 'BUTTON') {
            submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Processing...';
          } else {
            submitBtn.value = 'Processing...';
          }
        }
      });
    }
  });
});

} catch (error) {
  console.error('üö® JAVASCRIPT ERROR CAUGHT:', error);
  console.error('üö® ERROR STACK:', error.stack);
  alert('üö® JavaScript Error: ' + error.message);
}

console.log('üî• STEP FINAL: Script execution completed');
</script>